// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: apis/factorioapi/v2/command.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConsoleService_CommandRaw_FullMethodName                                  = "/apis.factorioapi.v2.ConsoleService/CommandRaw"
	ConsoleService_CommandMessage_FullMethodName                              = "/apis.factorioapi.v2.ConsoleService/CommandMessage"
	ConsoleService_CommandAlerts_FullMethodName                               = "/apis.factorioapi.v2.ConsoleService/CommandAlerts"
	ConsoleService_CommandEnableResearchQueue_FullMethodName                  = "/apis.factorioapi.v2.ConsoleService/CommandEnableResearchQueue"
	ConsoleService_CommandMuteProgrammableSpeakerForEveryone_FullMethodName   = "/apis.factorioapi.v2.ConsoleService/CommandMuteProgrammableSpeakerForEveryone"
	ConsoleService_CommandUnmuteProgrammableSpeakerForEveryone_FullMethodName = "/apis.factorioapi.v2.ConsoleService/CommandUnmuteProgrammableSpeakerForEveryone"
	ConsoleService_CommandPermissions_FullMethodName                          = "/apis.factorioapi.v2.ConsoleService/CommandPermissions"
	ConsoleService_CommandPermissionsAddPlayer_FullMethodName                 = "/apis.factorioapi.v2.ConsoleService/CommandPermissionsAddPlayer"
	ConsoleService_CommandPermissionsCreateGroup_FullMethodName               = "/apis.factorioapi.v2.ConsoleService/CommandPermissionsCreateGroup"
	ConsoleService_CommandPermissionsDeleteGroup_FullMethodName               = "/apis.factorioapi.v2.ConsoleService/CommandPermissionsDeleteGroup"
	ConsoleService_CommandPermissionsEditGroup_FullMethodName                 = "/apis.factorioapi.v2.ConsoleService/CommandPermissionsEditGroup"
	ConsoleService_CommandPermissionsGetPlayerGroup_FullMethodName            = "/apis.factorioapi.v2.ConsoleService/CommandPermissionsGetPlayerGroup"
	ConsoleService_CommandPermissionsRemovePlayerGroup_FullMethodName         = "/apis.factorioapi.v2.ConsoleService/CommandPermissionsRemovePlayerGroup"
	ConsoleService_CommandPermissionsRenameGroup_FullMethodName               = "/apis.factorioapi.v2.ConsoleService/CommandPermissionsRenameGroup"
	ConsoleService_CommandResetTips_FullMethodName                            = "/apis.factorioapi.v2.ConsoleService/CommandResetTips"
	ConsoleService_CommandEvolution_FullMethodName                            = "/apis.factorioapi.v2.ConsoleService/CommandEvolution"
	ConsoleService_CommandEvolutionGet_FullMethodName                         = "/apis.factorioapi.v2.ConsoleService/CommandEvolutionGet"
	ConsoleService_CommandSeed_FullMethodName                                 = "/apis.factorioapi.v2.ConsoleService/CommandSeed"
	ConsoleService_CommandTime_FullMethodName                                 = "/apis.factorioapi.v2.ConsoleService/CommandTime"
	ConsoleService_CommandToggleActionLogging_FullMethodName                  = "/apis.factorioapi.v2.ConsoleService/CommandToggleActionLogging"
	ConsoleService_CommandToggleHeavyMode_FullMethodName                      = "/apis.factorioapi.v2.ConsoleService/CommandToggleHeavyMode"
	ConsoleService_CommandUnlockShortcutBar_FullMethodName                    = "/apis.factorioapi.v2.ConsoleService/CommandUnlockShortcutBar"
	ConsoleService_CommandUnlockTips_FullMethodName                           = "/apis.factorioapi.v2.ConsoleService/CommandUnlockTips"
	ConsoleService_CommandVersion_FullMethodName                              = "/apis.factorioapi.v2.ConsoleService/CommandVersion"
	ConsoleService_CommandAdmins_FullMethodName                               = "/apis.factorioapi.v2.ConsoleService/CommandAdmins"
	ConsoleService_CommandBan_FullMethodName                                  = "/apis.factorioapi.v2.ConsoleService/CommandBan"
	ConsoleService_CommandBans_FullMethodName                                 = "/apis.factorioapi.v2.ConsoleService/CommandBans"
	ConsoleService_CommandDemote_FullMethodName                               = "/apis.factorioapi.v2.ConsoleService/CommandDemote"
	ConsoleService_CommandIgnore_FullMethodName                               = "/apis.factorioapi.v2.ConsoleService/CommandIgnore"
	ConsoleService_CommandKick_FullMethodName                                 = "/apis.factorioapi.v2.ConsoleService/CommandKick"
	ConsoleService_CommandMute_FullMethodName                                 = "/apis.factorioapi.v2.ConsoleService/CommandMute"
	ConsoleService_CommandMutes_FullMethodName                                = "/apis.factorioapi.v2.ConsoleService/CommandMutes"
	ConsoleService_CommandPlayers_FullMethodName                              = "/apis.factorioapi.v2.ConsoleService/CommandPlayers"
	ConsoleService_CommandPromote_FullMethodName                              = "/apis.factorioapi.v2.ConsoleService/CommandPromote"
	ConsoleService_CommandPurge_FullMethodName                                = "/apis.factorioapi.v2.ConsoleService/CommandPurge"
	ConsoleService_CommandServerSave_FullMethodName                           = "/apis.factorioapi.v2.ConsoleService/CommandServerSave"
	ConsoleService_CommandUnban_FullMethodName                                = "/apis.factorioapi.v2.ConsoleService/CommandUnban"
	ConsoleService_CommandUnignore_FullMethodName                             = "/apis.factorioapi.v2.ConsoleService/CommandUnignore"
	ConsoleService_CommandUnmute_FullMethodName                               = "/apis.factorioapi.v2.ConsoleService/CommandUnmute"
	ConsoleService_CommandWhisper_FullMethodName                              = "/apis.factorioapi.v2.ConsoleService/CommandWhisper"
	ConsoleService_CommandWhitelistAdd_FullMethodName                         = "/apis.factorioapi.v2.ConsoleService/CommandWhitelistAdd"
	ConsoleService_CommandWhitelistGet_FullMethodName                         = "/apis.factorioapi.v2.ConsoleService/CommandWhitelistGet"
	ConsoleService_CommandWhitelistRemove_FullMethodName                      = "/apis.factorioapi.v2.ConsoleService/CommandWhitelistRemove"
	ConsoleService_CommandWhitelistClear_FullMethodName                       = "/apis.factorioapi.v2.ConsoleService/CommandWhitelistClear"
)

// ConsoleServiceClient is the client API for ConsoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsoleServiceClient interface {
	CommandRaw(ctx context.Context, in *CommandRawRequest, opts ...grpc.CallOption) (*CommandRawResponse, error)
	CommandMessage(ctx context.Context, in *CommandMessageRequest, opts ...grpc.CallOption) (*CommandMessageResponse, error)
	CommandAlerts(ctx context.Context, in *CommandAlertsRequest, opts ...grpc.CallOption) (*CommandAlertsResponse, error)
	CommandEnableResearchQueue(ctx context.Context, in *CommandEnableResearchQueueRequest, opts ...grpc.CallOption) (*CommandEnableResearchQueueResponse, error)
	CommandMuteProgrammableSpeakerForEveryone(ctx context.Context, in *CommandMuteProgrammableSpeakerForEveryoneRequest, opts ...grpc.CallOption) (*CommandMuteProgrammableSpeakerForEveryoneResponse, error)
	CommandUnmuteProgrammableSpeakerForEveryone(ctx context.Context, in *CommandUnmuteProgrammableSpeakerForEveryoneRequest, opts ...grpc.CallOption) (*CommandUnmuteProgrammableSpeakerForEveryoneResponse, error)
	CommandPermissions(ctx context.Context, in *CommandPermissionsRequest, opts ...grpc.CallOption) (*CommandPermissionsResponse, error)
	CommandPermissionsAddPlayer(ctx context.Context, in *CommandPermissionsAddPlayerRequest, opts ...grpc.CallOption) (*CommandPermissionsAddPlayerResponse, error)
	CommandPermissionsCreateGroup(ctx context.Context, in *CommandPermissionsCreateGroupRequest, opts ...grpc.CallOption) (*CommandPermissionsCreateGroupResponse, error)
	CommandPermissionsDeleteGroup(ctx context.Context, in *CommandPermissionsDeleteGroupRequest, opts ...grpc.CallOption) (*CommandPermissionsDeleteGroupResponse, error)
	CommandPermissionsEditGroup(ctx context.Context, in *CommandPermissionsEditGroupRequest, opts ...grpc.CallOption) (*CommandPermissionsEditGroupResponse, error)
	CommandPermissionsGetPlayerGroup(ctx context.Context, in *CommandPermissionsGetPlayerGroupRequest, opts ...grpc.CallOption) (*CommandPermissionsGetPlayerGroupResponse, error)
	CommandPermissionsRemovePlayerGroup(ctx context.Context, in *CommandPermissionsRemovePlayerGroupRequest, opts ...grpc.CallOption) (*CommandPermissionsRemovePlayerGroupResponse, error)
	CommandPermissionsRenameGroup(ctx context.Context, in *CommandPermissionsRenameGroupRequest, opts ...grpc.CallOption) (*CommandPermissionsRenameGroupResponse, error)
	CommandResetTips(ctx context.Context, in *CommandResetTipsRequest, opts ...grpc.CallOption) (*CommandResetTipsResponse, error)
	CommandEvolution(ctx context.Context, in *CommandEvolutionRequest, opts ...grpc.CallOption) (*CommandEvolutionResponse, error)
	CommandEvolutionGet(ctx context.Context, in *CommandEvolutionGetRequest, opts ...grpc.CallOption) (*CommandEvolutionGetResponse, error)
	CommandSeed(ctx context.Context, in *CommandSeedRequest, opts ...grpc.CallOption) (*CommandSeedResponse, error)
	CommandTime(ctx context.Context, in *CommandTimeRequest, opts ...grpc.CallOption) (*CommandTimeResponse, error)
	CommandToggleActionLogging(ctx context.Context, in *CommandToggleActionLoggingRequest, opts ...grpc.CallOption) (*CommandToggleActionLoggingResponse, error)
	CommandToggleHeavyMode(ctx context.Context, in *CommandToggleHeavyModeRequest, opts ...grpc.CallOption) (*CommandToggleHeavyModeResponse, error)
	CommandUnlockShortcutBar(ctx context.Context, in *CommandUnlockShortcutBarRequest, opts ...grpc.CallOption) (*CommandUnlockShortcutBarResponse, error)
	CommandUnlockTips(ctx context.Context, in *CommandUnlockTipsRequest, opts ...grpc.CallOption) (*CommandUnlockTipsResponse, error)
	CommandVersion(ctx context.Context, in *CommandVersionRequest, opts ...grpc.CallOption) (*CommandVersionResponse, error)
	CommandAdmins(ctx context.Context, in *CommandAdminsRequest, opts ...grpc.CallOption) (*CommandAdminsResponse, error)
	CommandBan(ctx context.Context, in *CommandBanRequest, opts ...grpc.CallOption) (*CommandBanResponse, error)
	CommandBans(ctx context.Context, in *CommandBansRequest, opts ...grpc.CallOption) (*CommandBansResponse, error)
	CommandDemote(ctx context.Context, in *CommandDemoteRequest, opts ...grpc.CallOption) (*CommandDemoteResponse, error)
	CommandIgnore(ctx context.Context, in *CommandIgnoreRequest, opts ...grpc.CallOption) (*CommandIgnoreResponse, error)
	CommandKick(ctx context.Context, in *CommandKickRequest, opts ...grpc.CallOption) (*CommandKickResponse, error)
	CommandMute(ctx context.Context, in *CommandMuteRequest, opts ...grpc.CallOption) (*CommandMuteResponse, error)
	CommandMutes(ctx context.Context, in *CommandMutesRequest, opts ...grpc.CallOption) (*CommandMutesResponse, error)
	CommandPlayers(ctx context.Context, in *CommandPlayersRequest, opts ...grpc.CallOption) (*CommandPlayersResponse, error)
	CommandPromote(ctx context.Context, in *CommandPromoteRequest, opts ...grpc.CallOption) (*CommandPromoteResponse, error)
	CommandPurge(ctx context.Context, in *CommandPurgeRequest, opts ...grpc.CallOption) (*CommandPurgeResponse, error)
	CommandServerSave(ctx context.Context, in *CommandServerSaveRequest, opts ...grpc.CallOption) (*CommandServerSaveResponse, error)
	CommandUnban(ctx context.Context, in *CommandUnbanRequest, opts ...grpc.CallOption) (*CommandUnbanResponse, error)
	CommandUnignore(ctx context.Context, in *CommandUnignoreRequest, opts ...grpc.CallOption) (*CommandUnignoreResponse, error)
	CommandUnmute(ctx context.Context, in *CommandUnmuteRequest, opts ...grpc.CallOption) (*CommandUnmuteResponse, error)
	CommandWhisper(ctx context.Context, in *CommandWhisperRequest, opts ...grpc.CallOption) (*CommandWhisperResponse, error)
	CommandWhitelistAdd(ctx context.Context, in *CommandWhitelistAddRequest, opts ...grpc.CallOption) (*CommandWhitelistAddResponse, error)
	CommandWhitelistGet(ctx context.Context, in *CommandWhitelistGetRequest, opts ...grpc.CallOption) (*CommandWhitelistGetResponse, error)
	CommandWhitelistRemove(ctx context.Context, in *CommandWhitelistRemoveRequest, opts ...grpc.CallOption) (*CommandWhitelistRemoveResponse, error)
	CommandWhitelistClear(ctx context.Context, in *CommandWhitelistClearRequest, opts ...grpc.CallOption) (*CommandWhitelistClearResponse, error)
}

type consoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsoleServiceClient(cc grpc.ClientConnInterface) ConsoleServiceClient {
	return &consoleServiceClient{cc}
}

func (c *consoleServiceClient) CommandRaw(ctx context.Context, in *CommandRawRequest, opts ...grpc.CallOption) (*CommandRawResponse, error) {
	out := new(CommandRawResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandRaw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandMessage(ctx context.Context, in *CommandMessageRequest, opts ...grpc.CallOption) (*CommandMessageResponse, error) {
	out := new(CommandMessageResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandAlerts(ctx context.Context, in *CommandAlertsRequest, opts ...grpc.CallOption) (*CommandAlertsResponse, error) {
	out := new(CommandAlertsResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandAlerts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandEnableResearchQueue(ctx context.Context, in *CommandEnableResearchQueueRequest, opts ...grpc.CallOption) (*CommandEnableResearchQueueResponse, error) {
	out := new(CommandEnableResearchQueueResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandEnableResearchQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandMuteProgrammableSpeakerForEveryone(ctx context.Context, in *CommandMuteProgrammableSpeakerForEveryoneRequest, opts ...grpc.CallOption) (*CommandMuteProgrammableSpeakerForEveryoneResponse, error) {
	out := new(CommandMuteProgrammableSpeakerForEveryoneResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandMuteProgrammableSpeakerForEveryone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandUnmuteProgrammableSpeakerForEveryone(ctx context.Context, in *CommandUnmuteProgrammableSpeakerForEveryoneRequest, opts ...grpc.CallOption) (*CommandUnmuteProgrammableSpeakerForEveryoneResponse, error) {
	out := new(CommandUnmuteProgrammableSpeakerForEveryoneResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandUnmuteProgrammableSpeakerForEveryone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandPermissions(ctx context.Context, in *CommandPermissionsRequest, opts ...grpc.CallOption) (*CommandPermissionsResponse, error) {
	out := new(CommandPermissionsResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandPermissionsAddPlayer(ctx context.Context, in *CommandPermissionsAddPlayerRequest, opts ...grpc.CallOption) (*CommandPermissionsAddPlayerResponse, error) {
	out := new(CommandPermissionsAddPlayerResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandPermissionsAddPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandPermissionsCreateGroup(ctx context.Context, in *CommandPermissionsCreateGroupRequest, opts ...grpc.CallOption) (*CommandPermissionsCreateGroupResponse, error) {
	out := new(CommandPermissionsCreateGroupResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandPermissionsCreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandPermissionsDeleteGroup(ctx context.Context, in *CommandPermissionsDeleteGroupRequest, opts ...grpc.CallOption) (*CommandPermissionsDeleteGroupResponse, error) {
	out := new(CommandPermissionsDeleteGroupResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandPermissionsDeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandPermissionsEditGroup(ctx context.Context, in *CommandPermissionsEditGroupRequest, opts ...grpc.CallOption) (*CommandPermissionsEditGroupResponse, error) {
	out := new(CommandPermissionsEditGroupResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandPermissionsEditGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandPermissionsGetPlayerGroup(ctx context.Context, in *CommandPermissionsGetPlayerGroupRequest, opts ...grpc.CallOption) (*CommandPermissionsGetPlayerGroupResponse, error) {
	out := new(CommandPermissionsGetPlayerGroupResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandPermissionsGetPlayerGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandPermissionsRemovePlayerGroup(ctx context.Context, in *CommandPermissionsRemovePlayerGroupRequest, opts ...grpc.CallOption) (*CommandPermissionsRemovePlayerGroupResponse, error) {
	out := new(CommandPermissionsRemovePlayerGroupResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandPermissionsRemovePlayerGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandPermissionsRenameGroup(ctx context.Context, in *CommandPermissionsRenameGroupRequest, opts ...grpc.CallOption) (*CommandPermissionsRenameGroupResponse, error) {
	out := new(CommandPermissionsRenameGroupResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandPermissionsRenameGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandResetTips(ctx context.Context, in *CommandResetTipsRequest, opts ...grpc.CallOption) (*CommandResetTipsResponse, error) {
	out := new(CommandResetTipsResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandResetTips_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandEvolution(ctx context.Context, in *CommandEvolutionRequest, opts ...grpc.CallOption) (*CommandEvolutionResponse, error) {
	out := new(CommandEvolutionResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandEvolution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandEvolutionGet(ctx context.Context, in *CommandEvolutionGetRequest, opts ...grpc.CallOption) (*CommandEvolutionGetResponse, error) {
	out := new(CommandEvolutionGetResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandEvolutionGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandSeed(ctx context.Context, in *CommandSeedRequest, opts ...grpc.CallOption) (*CommandSeedResponse, error) {
	out := new(CommandSeedResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandSeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandTime(ctx context.Context, in *CommandTimeRequest, opts ...grpc.CallOption) (*CommandTimeResponse, error) {
	out := new(CommandTimeResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandToggleActionLogging(ctx context.Context, in *CommandToggleActionLoggingRequest, opts ...grpc.CallOption) (*CommandToggleActionLoggingResponse, error) {
	out := new(CommandToggleActionLoggingResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandToggleActionLogging_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandToggleHeavyMode(ctx context.Context, in *CommandToggleHeavyModeRequest, opts ...grpc.CallOption) (*CommandToggleHeavyModeResponse, error) {
	out := new(CommandToggleHeavyModeResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandToggleHeavyMode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandUnlockShortcutBar(ctx context.Context, in *CommandUnlockShortcutBarRequest, opts ...grpc.CallOption) (*CommandUnlockShortcutBarResponse, error) {
	out := new(CommandUnlockShortcutBarResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandUnlockShortcutBar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandUnlockTips(ctx context.Context, in *CommandUnlockTipsRequest, opts ...grpc.CallOption) (*CommandUnlockTipsResponse, error) {
	out := new(CommandUnlockTipsResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandUnlockTips_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandVersion(ctx context.Context, in *CommandVersionRequest, opts ...grpc.CallOption) (*CommandVersionResponse, error) {
	out := new(CommandVersionResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandAdmins(ctx context.Context, in *CommandAdminsRequest, opts ...grpc.CallOption) (*CommandAdminsResponse, error) {
	out := new(CommandAdminsResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandAdmins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandBan(ctx context.Context, in *CommandBanRequest, opts ...grpc.CallOption) (*CommandBanResponse, error) {
	out := new(CommandBanResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandBan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandBans(ctx context.Context, in *CommandBansRequest, opts ...grpc.CallOption) (*CommandBansResponse, error) {
	out := new(CommandBansResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandBans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandDemote(ctx context.Context, in *CommandDemoteRequest, opts ...grpc.CallOption) (*CommandDemoteResponse, error) {
	out := new(CommandDemoteResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandDemote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandIgnore(ctx context.Context, in *CommandIgnoreRequest, opts ...grpc.CallOption) (*CommandIgnoreResponse, error) {
	out := new(CommandIgnoreResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandIgnore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandKick(ctx context.Context, in *CommandKickRequest, opts ...grpc.CallOption) (*CommandKickResponse, error) {
	out := new(CommandKickResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandKick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandMute(ctx context.Context, in *CommandMuteRequest, opts ...grpc.CallOption) (*CommandMuteResponse, error) {
	out := new(CommandMuteResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandMute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandMutes(ctx context.Context, in *CommandMutesRequest, opts ...grpc.CallOption) (*CommandMutesResponse, error) {
	out := new(CommandMutesResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandMutes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandPlayers(ctx context.Context, in *CommandPlayersRequest, opts ...grpc.CallOption) (*CommandPlayersResponse, error) {
	out := new(CommandPlayersResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandPlayers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandPromote(ctx context.Context, in *CommandPromoteRequest, opts ...grpc.CallOption) (*CommandPromoteResponse, error) {
	out := new(CommandPromoteResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandPromote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandPurge(ctx context.Context, in *CommandPurgeRequest, opts ...grpc.CallOption) (*CommandPurgeResponse, error) {
	out := new(CommandPurgeResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandPurge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandServerSave(ctx context.Context, in *CommandServerSaveRequest, opts ...grpc.CallOption) (*CommandServerSaveResponse, error) {
	out := new(CommandServerSaveResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandServerSave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandUnban(ctx context.Context, in *CommandUnbanRequest, opts ...grpc.CallOption) (*CommandUnbanResponse, error) {
	out := new(CommandUnbanResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandUnban_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandUnignore(ctx context.Context, in *CommandUnignoreRequest, opts ...grpc.CallOption) (*CommandUnignoreResponse, error) {
	out := new(CommandUnignoreResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandUnignore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandUnmute(ctx context.Context, in *CommandUnmuteRequest, opts ...grpc.CallOption) (*CommandUnmuteResponse, error) {
	out := new(CommandUnmuteResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandUnmute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandWhisper(ctx context.Context, in *CommandWhisperRequest, opts ...grpc.CallOption) (*CommandWhisperResponse, error) {
	out := new(CommandWhisperResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandWhisper_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandWhitelistAdd(ctx context.Context, in *CommandWhitelistAddRequest, opts ...grpc.CallOption) (*CommandWhitelistAddResponse, error) {
	out := new(CommandWhitelistAddResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandWhitelistAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandWhitelistGet(ctx context.Context, in *CommandWhitelistGetRequest, opts ...grpc.CallOption) (*CommandWhitelistGetResponse, error) {
	out := new(CommandWhitelistGetResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandWhitelistGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandWhitelistRemove(ctx context.Context, in *CommandWhitelistRemoveRequest, opts ...grpc.CallOption) (*CommandWhitelistRemoveResponse, error) {
	out := new(CommandWhitelistRemoveResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandWhitelistRemove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleServiceClient) CommandWhitelistClear(ctx context.Context, in *CommandWhitelistClearRequest, opts ...grpc.CallOption) (*CommandWhitelistClearResponse, error) {
	out := new(CommandWhitelistClearResponse)
	err := c.cc.Invoke(ctx, ConsoleService_CommandWhitelistClear_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsoleServiceServer is the server API for ConsoleService service.
// All implementations must embed UnimplementedConsoleServiceServer
// for forward compatibility
type ConsoleServiceServer interface {
	CommandRaw(context.Context, *CommandRawRequest) (*CommandRawResponse, error)
	CommandMessage(context.Context, *CommandMessageRequest) (*CommandMessageResponse, error)
	CommandAlerts(context.Context, *CommandAlertsRequest) (*CommandAlertsResponse, error)
	CommandEnableResearchQueue(context.Context, *CommandEnableResearchQueueRequest) (*CommandEnableResearchQueueResponse, error)
	CommandMuteProgrammableSpeakerForEveryone(context.Context, *CommandMuteProgrammableSpeakerForEveryoneRequest) (*CommandMuteProgrammableSpeakerForEveryoneResponse, error)
	CommandUnmuteProgrammableSpeakerForEveryone(context.Context, *CommandUnmuteProgrammableSpeakerForEveryoneRequest) (*CommandUnmuteProgrammableSpeakerForEveryoneResponse, error)
	CommandPermissions(context.Context, *CommandPermissionsRequest) (*CommandPermissionsResponse, error)
	CommandPermissionsAddPlayer(context.Context, *CommandPermissionsAddPlayerRequest) (*CommandPermissionsAddPlayerResponse, error)
	CommandPermissionsCreateGroup(context.Context, *CommandPermissionsCreateGroupRequest) (*CommandPermissionsCreateGroupResponse, error)
	CommandPermissionsDeleteGroup(context.Context, *CommandPermissionsDeleteGroupRequest) (*CommandPermissionsDeleteGroupResponse, error)
	CommandPermissionsEditGroup(context.Context, *CommandPermissionsEditGroupRequest) (*CommandPermissionsEditGroupResponse, error)
	CommandPermissionsGetPlayerGroup(context.Context, *CommandPermissionsGetPlayerGroupRequest) (*CommandPermissionsGetPlayerGroupResponse, error)
	CommandPermissionsRemovePlayerGroup(context.Context, *CommandPermissionsRemovePlayerGroupRequest) (*CommandPermissionsRemovePlayerGroupResponse, error)
	CommandPermissionsRenameGroup(context.Context, *CommandPermissionsRenameGroupRequest) (*CommandPermissionsRenameGroupResponse, error)
	CommandResetTips(context.Context, *CommandResetTipsRequest) (*CommandResetTipsResponse, error)
	CommandEvolution(context.Context, *CommandEvolutionRequest) (*CommandEvolutionResponse, error)
	CommandEvolutionGet(context.Context, *CommandEvolutionGetRequest) (*CommandEvolutionGetResponse, error)
	CommandSeed(context.Context, *CommandSeedRequest) (*CommandSeedResponse, error)
	CommandTime(context.Context, *CommandTimeRequest) (*CommandTimeResponse, error)
	CommandToggleActionLogging(context.Context, *CommandToggleActionLoggingRequest) (*CommandToggleActionLoggingResponse, error)
	CommandToggleHeavyMode(context.Context, *CommandToggleHeavyModeRequest) (*CommandToggleHeavyModeResponse, error)
	CommandUnlockShortcutBar(context.Context, *CommandUnlockShortcutBarRequest) (*CommandUnlockShortcutBarResponse, error)
	CommandUnlockTips(context.Context, *CommandUnlockTipsRequest) (*CommandUnlockTipsResponse, error)
	CommandVersion(context.Context, *CommandVersionRequest) (*CommandVersionResponse, error)
	CommandAdmins(context.Context, *CommandAdminsRequest) (*CommandAdminsResponse, error)
	CommandBan(context.Context, *CommandBanRequest) (*CommandBanResponse, error)
	CommandBans(context.Context, *CommandBansRequest) (*CommandBansResponse, error)
	CommandDemote(context.Context, *CommandDemoteRequest) (*CommandDemoteResponse, error)
	CommandIgnore(context.Context, *CommandIgnoreRequest) (*CommandIgnoreResponse, error)
	CommandKick(context.Context, *CommandKickRequest) (*CommandKickResponse, error)
	CommandMute(context.Context, *CommandMuteRequest) (*CommandMuteResponse, error)
	CommandMutes(context.Context, *CommandMutesRequest) (*CommandMutesResponse, error)
	CommandPlayers(context.Context, *CommandPlayersRequest) (*CommandPlayersResponse, error)
	CommandPromote(context.Context, *CommandPromoteRequest) (*CommandPromoteResponse, error)
	CommandPurge(context.Context, *CommandPurgeRequest) (*CommandPurgeResponse, error)
	CommandServerSave(context.Context, *CommandServerSaveRequest) (*CommandServerSaveResponse, error)
	CommandUnban(context.Context, *CommandUnbanRequest) (*CommandUnbanResponse, error)
	CommandUnignore(context.Context, *CommandUnignoreRequest) (*CommandUnignoreResponse, error)
	CommandUnmute(context.Context, *CommandUnmuteRequest) (*CommandUnmuteResponse, error)
	CommandWhisper(context.Context, *CommandWhisperRequest) (*CommandWhisperResponse, error)
	CommandWhitelistAdd(context.Context, *CommandWhitelistAddRequest) (*CommandWhitelistAddResponse, error)
	CommandWhitelistGet(context.Context, *CommandWhitelistGetRequest) (*CommandWhitelistGetResponse, error)
	CommandWhitelistRemove(context.Context, *CommandWhitelistRemoveRequest) (*CommandWhitelistRemoveResponse, error)
	CommandWhitelistClear(context.Context, *CommandWhitelistClearRequest) (*CommandWhitelistClearResponse, error)
	mustEmbedUnimplementedConsoleServiceServer()
}

// UnimplementedConsoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConsoleServiceServer struct {
}

func (UnimplementedConsoleServiceServer) CommandRaw(context.Context, *CommandRawRequest) (*CommandRawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandRaw not implemented")
}
func (UnimplementedConsoleServiceServer) CommandMessage(context.Context, *CommandMessageRequest) (*CommandMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandMessage not implemented")
}
func (UnimplementedConsoleServiceServer) CommandAlerts(context.Context, *CommandAlertsRequest) (*CommandAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandAlerts not implemented")
}
func (UnimplementedConsoleServiceServer) CommandEnableResearchQueue(context.Context, *CommandEnableResearchQueueRequest) (*CommandEnableResearchQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandEnableResearchQueue not implemented")
}
func (UnimplementedConsoleServiceServer) CommandMuteProgrammableSpeakerForEveryone(context.Context, *CommandMuteProgrammableSpeakerForEveryoneRequest) (*CommandMuteProgrammableSpeakerForEveryoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandMuteProgrammableSpeakerForEveryone not implemented")
}
func (UnimplementedConsoleServiceServer) CommandUnmuteProgrammableSpeakerForEveryone(context.Context, *CommandUnmuteProgrammableSpeakerForEveryoneRequest) (*CommandUnmuteProgrammableSpeakerForEveryoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandUnmuteProgrammableSpeakerForEveryone not implemented")
}
func (UnimplementedConsoleServiceServer) CommandPermissions(context.Context, *CommandPermissionsRequest) (*CommandPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandPermissions not implemented")
}
func (UnimplementedConsoleServiceServer) CommandPermissionsAddPlayer(context.Context, *CommandPermissionsAddPlayerRequest) (*CommandPermissionsAddPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandPermissionsAddPlayer not implemented")
}
func (UnimplementedConsoleServiceServer) CommandPermissionsCreateGroup(context.Context, *CommandPermissionsCreateGroupRequest) (*CommandPermissionsCreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandPermissionsCreateGroup not implemented")
}
func (UnimplementedConsoleServiceServer) CommandPermissionsDeleteGroup(context.Context, *CommandPermissionsDeleteGroupRequest) (*CommandPermissionsDeleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandPermissionsDeleteGroup not implemented")
}
func (UnimplementedConsoleServiceServer) CommandPermissionsEditGroup(context.Context, *CommandPermissionsEditGroupRequest) (*CommandPermissionsEditGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandPermissionsEditGroup not implemented")
}
func (UnimplementedConsoleServiceServer) CommandPermissionsGetPlayerGroup(context.Context, *CommandPermissionsGetPlayerGroupRequest) (*CommandPermissionsGetPlayerGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandPermissionsGetPlayerGroup not implemented")
}
func (UnimplementedConsoleServiceServer) CommandPermissionsRemovePlayerGroup(context.Context, *CommandPermissionsRemovePlayerGroupRequest) (*CommandPermissionsRemovePlayerGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandPermissionsRemovePlayerGroup not implemented")
}
func (UnimplementedConsoleServiceServer) CommandPermissionsRenameGroup(context.Context, *CommandPermissionsRenameGroupRequest) (*CommandPermissionsRenameGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandPermissionsRenameGroup not implemented")
}
func (UnimplementedConsoleServiceServer) CommandResetTips(context.Context, *CommandResetTipsRequest) (*CommandResetTipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandResetTips not implemented")
}
func (UnimplementedConsoleServiceServer) CommandEvolution(context.Context, *CommandEvolutionRequest) (*CommandEvolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandEvolution not implemented")
}
func (UnimplementedConsoleServiceServer) CommandEvolutionGet(context.Context, *CommandEvolutionGetRequest) (*CommandEvolutionGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandEvolutionGet not implemented")
}
func (UnimplementedConsoleServiceServer) CommandSeed(context.Context, *CommandSeedRequest) (*CommandSeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandSeed not implemented")
}
func (UnimplementedConsoleServiceServer) CommandTime(context.Context, *CommandTimeRequest) (*CommandTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandTime not implemented")
}
func (UnimplementedConsoleServiceServer) CommandToggleActionLogging(context.Context, *CommandToggleActionLoggingRequest) (*CommandToggleActionLoggingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandToggleActionLogging not implemented")
}
func (UnimplementedConsoleServiceServer) CommandToggleHeavyMode(context.Context, *CommandToggleHeavyModeRequest) (*CommandToggleHeavyModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandToggleHeavyMode not implemented")
}
func (UnimplementedConsoleServiceServer) CommandUnlockShortcutBar(context.Context, *CommandUnlockShortcutBarRequest) (*CommandUnlockShortcutBarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandUnlockShortcutBar not implemented")
}
func (UnimplementedConsoleServiceServer) CommandUnlockTips(context.Context, *CommandUnlockTipsRequest) (*CommandUnlockTipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandUnlockTips not implemented")
}
func (UnimplementedConsoleServiceServer) CommandVersion(context.Context, *CommandVersionRequest) (*CommandVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandVersion not implemented")
}
func (UnimplementedConsoleServiceServer) CommandAdmins(context.Context, *CommandAdminsRequest) (*CommandAdminsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandAdmins not implemented")
}
func (UnimplementedConsoleServiceServer) CommandBan(context.Context, *CommandBanRequest) (*CommandBanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandBan not implemented")
}
func (UnimplementedConsoleServiceServer) CommandBans(context.Context, *CommandBansRequest) (*CommandBansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandBans not implemented")
}
func (UnimplementedConsoleServiceServer) CommandDemote(context.Context, *CommandDemoteRequest) (*CommandDemoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandDemote not implemented")
}
func (UnimplementedConsoleServiceServer) CommandIgnore(context.Context, *CommandIgnoreRequest) (*CommandIgnoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandIgnore not implemented")
}
func (UnimplementedConsoleServiceServer) CommandKick(context.Context, *CommandKickRequest) (*CommandKickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandKick not implemented")
}
func (UnimplementedConsoleServiceServer) CommandMute(context.Context, *CommandMuteRequest) (*CommandMuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandMute not implemented")
}
func (UnimplementedConsoleServiceServer) CommandMutes(context.Context, *CommandMutesRequest) (*CommandMutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandMutes not implemented")
}
func (UnimplementedConsoleServiceServer) CommandPlayers(context.Context, *CommandPlayersRequest) (*CommandPlayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandPlayers not implemented")
}
func (UnimplementedConsoleServiceServer) CommandPromote(context.Context, *CommandPromoteRequest) (*CommandPromoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandPromote not implemented")
}
func (UnimplementedConsoleServiceServer) CommandPurge(context.Context, *CommandPurgeRequest) (*CommandPurgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandPurge not implemented")
}
func (UnimplementedConsoleServiceServer) CommandServerSave(context.Context, *CommandServerSaveRequest) (*CommandServerSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandServerSave not implemented")
}
func (UnimplementedConsoleServiceServer) CommandUnban(context.Context, *CommandUnbanRequest) (*CommandUnbanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandUnban not implemented")
}
func (UnimplementedConsoleServiceServer) CommandUnignore(context.Context, *CommandUnignoreRequest) (*CommandUnignoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandUnignore not implemented")
}
func (UnimplementedConsoleServiceServer) CommandUnmute(context.Context, *CommandUnmuteRequest) (*CommandUnmuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandUnmute not implemented")
}
func (UnimplementedConsoleServiceServer) CommandWhisper(context.Context, *CommandWhisperRequest) (*CommandWhisperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandWhisper not implemented")
}
func (UnimplementedConsoleServiceServer) CommandWhitelistAdd(context.Context, *CommandWhitelistAddRequest) (*CommandWhitelistAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandWhitelistAdd not implemented")
}
func (UnimplementedConsoleServiceServer) CommandWhitelistGet(context.Context, *CommandWhitelistGetRequest) (*CommandWhitelistGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandWhitelistGet not implemented")
}
func (UnimplementedConsoleServiceServer) CommandWhitelistRemove(context.Context, *CommandWhitelistRemoveRequest) (*CommandWhitelistRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandWhitelistRemove not implemented")
}
func (UnimplementedConsoleServiceServer) CommandWhitelistClear(context.Context, *CommandWhitelistClearRequest) (*CommandWhitelistClearResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandWhitelistClear not implemented")
}
func (UnimplementedConsoleServiceServer) mustEmbedUnimplementedConsoleServiceServer() {}

// UnsafeConsoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsoleServiceServer will
// result in compilation errors.
type UnsafeConsoleServiceServer interface {
	mustEmbedUnimplementedConsoleServiceServer()
}

func RegisterConsoleServiceServer(s grpc.ServiceRegistrar, srv ConsoleServiceServer) {
	s.RegisterService(&ConsoleService_ServiceDesc, srv)
}

func _ConsoleService_CommandRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandRaw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandRaw(ctx, req.(*CommandRawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandMessage(ctx, req.(*CommandMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandAlerts(ctx, req.(*CommandAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandEnableResearchQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandEnableResearchQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandEnableResearchQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandEnableResearchQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandEnableResearchQueue(ctx, req.(*CommandEnableResearchQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandMuteProgrammableSpeakerForEveryone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandMuteProgrammableSpeakerForEveryoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandMuteProgrammableSpeakerForEveryone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandMuteProgrammableSpeakerForEveryone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandMuteProgrammableSpeakerForEveryone(ctx, req.(*CommandMuteProgrammableSpeakerForEveryoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandUnmuteProgrammableSpeakerForEveryone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandUnmuteProgrammableSpeakerForEveryoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandUnmuteProgrammableSpeakerForEveryone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandUnmuteProgrammableSpeakerForEveryone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandUnmuteProgrammableSpeakerForEveryone(ctx, req.(*CommandUnmuteProgrammableSpeakerForEveryoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandPermissions(ctx, req.(*CommandPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandPermissionsAddPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandPermissionsAddPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandPermissionsAddPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandPermissionsAddPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandPermissionsAddPlayer(ctx, req.(*CommandPermissionsAddPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandPermissionsCreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandPermissionsCreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandPermissionsCreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandPermissionsCreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandPermissionsCreateGroup(ctx, req.(*CommandPermissionsCreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandPermissionsDeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandPermissionsDeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandPermissionsDeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandPermissionsDeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandPermissionsDeleteGroup(ctx, req.(*CommandPermissionsDeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandPermissionsEditGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandPermissionsEditGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandPermissionsEditGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandPermissionsEditGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandPermissionsEditGroup(ctx, req.(*CommandPermissionsEditGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandPermissionsGetPlayerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandPermissionsGetPlayerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandPermissionsGetPlayerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandPermissionsGetPlayerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandPermissionsGetPlayerGroup(ctx, req.(*CommandPermissionsGetPlayerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandPermissionsRemovePlayerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandPermissionsRemovePlayerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandPermissionsRemovePlayerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandPermissionsRemovePlayerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandPermissionsRemovePlayerGroup(ctx, req.(*CommandPermissionsRemovePlayerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandPermissionsRenameGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandPermissionsRenameGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandPermissionsRenameGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandPermissionsRenameGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandPermissionsRenameGroup(ctx, req.(*CommandPermissionsRenameGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandResetTips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandResetTipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandResetTips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandResetTips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandResetTips(ctx, req.(*CommandResetTipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandEvolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandEvolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandEvolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandEvolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandEvolution(ctx, req.(*CommandEvolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandEvolutionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandEvolutionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandEvolutionGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandEvolutionGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandEvolutionGet(ctx, req.(*CommandEvolutionGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandSeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandSeed(ctx, req.(*CommandSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandTime(ctx, req.(*CommandTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandToggleActionLogging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandToggleActionLoggingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandToggleActionLogging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandToggleActionLogging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandToggleActionLogging(ctx, req.(*CommandToggleActionLoggingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandToggleHeavyMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandToggleHeavyModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandToggleHeavyMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandToggleHeavyMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandToggleHeavyMode(ctx, req.(*CommandToggleHeavyModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandUnlockShortcutBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandUnlockShortcutBarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandUnlockShortcutBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandUnlockShortcutBar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandUnlockShortcutBar(ctx, req.(*CommandUnlockShortcutBarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandUnlockTips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandUnlockTipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandUnlockTips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandUnlockTips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandUnlockTips(ctx, req.(*CommandUnlockTipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandVersion(ctx, req.(*CommandVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandAdminsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandAdmins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandAdmins(ctx, req.(*CommandAdminsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandBan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandBan(ctx, req.(*CommandBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandBans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandBansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandBans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandBans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandBans(ctx, req.(*CommandBansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandDemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandDemoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandDemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandDemote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandDemote(ctx, req.(*CommandDemoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandIgnore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandIgnoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandIgnore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandIgnore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandIgnore(ctx, req.(*CommandIgnoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandKick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandKickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandKick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandKick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandKick(ctx, req.(*CommandKickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandMute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandMuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandMute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandMute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandMute(ctx, req.(*CommandMuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandMutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandMutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandMutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandMutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandMutes(ctx, req.(*CommandMutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandPlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandPlayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandPlayers(ctx, req.(*CommandPlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandPromote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandPromoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandPromote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandPromote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandPromote(ctx, req.(*CommandPromoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandPurge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandPurgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandPurge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandPurge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandPurge(ctx, req.(*CommandPurgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandServerSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandServerSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandServerSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandServerSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandServerSave(ctx, req.(*CommandServerSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandUnban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandUnbanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandUnban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandUnban_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandUnban(ctx, req.(*CommandUnbanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandUnignore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandUnignoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandUnignore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandUnignore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandUnignore(ctx, req.(*CommandUnignoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandUnmute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandUnmuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandUnmute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandUnmute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandUnmute(ctx, req.(*CommandUnmuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandWhisper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandWhisperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandWhisper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandWhisper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandWhisper(ctx, req.(*CommandWhisperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandWhitelistAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandWhitelistAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandWhitelistAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandWhitelistAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandWhitelistAdd(ctx, req.(*CommandWhitelistAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandWhitelistGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandWhitelistGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandWhitelistGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandWhitelistGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandWhitelistGet(ctx, req.(*CommandWhitelistGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandWhitelistRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandWhitelistRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandWhitelistRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandWhitelistRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandWhitelistRemove(ctx, req.(*CommandWhitelistRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsoleService_CommandWhitelistClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandWhitelistClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServiceServer).CommandWhitelistClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleService_CommandWhitelistClear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServiceServer).CommandWhitelistClear(ctx, req.(*CommandWhitelistClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsoleService_ServiceDesc is the grpc.ServiceDesc for ConsoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apis.factorioapi.v2.ConsoleService",
	HandlerType: (*ConsoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommandRaw",
			Handler:    _ConsoleService_CommandRaw_Handler,
		},
		{
			MethodName: "CommandMessage",
			Handler:    _ConsoleService_CommandMessage_Handler,
		},
		{
			MethodName: "CommandAlerts",
			Handler:    _ConsoleService_CommandAlerts_Handler,
		},
		{
			MethodName: "CommandEnableResearchQueue",
			Handler:    _ConsoleService_CommandEnableResearchQueue_Handler,
		},
		{
			MethodName: "CommandMuteProgrammableSpeakerForEveryone",
			Handler:    _ConsoleService_CommandMuteProgrammableSpeakerForEveryone_Handler,
		},
		{
			MethodName: "CommandUnmuteProgrammableSpeakerForEveryone",
			Handler:    _ConsoleService_CommandUnmuteProgrammableSpeakerForEveryone_Handler,
		},
		{
			MethodName: "CommandPermissions",
			Handler:    _ConsoleService_CommandPermissions_Handler,
		},
		{
			MethodName: "CommandPermissionsAddPlayer",
			Handler:    _ConsoleService_CommandPermissionsAddPlayer_Handler,
		},
		{
			MethodName: "CommandPermissionsCreateGroup",
			Handler:    _ConsoleService_CommandPermissionsCreateGroup_Handler,
		},
		{
			MethodName: "CommandPermissionsDeleteGroup",
			Handler:    _ConsoleService_CommandPermissionsDeleteGroup_Handler,
		},
		{
			MethodName: "CommandPermissionsEditGroup",
			Handler:    _ConsoleService_CommandPermissionsEditGroup_Handler,
		},
		{
			MethodName: "CommandPermissionsGetPlayerGroup",
			Handler:    _ConsoleService_CommandPermissionsGetPlayerGroup_Handler,
		},
		{
			MethodName: "CommandPermissionsRemovePlayerGroup",
			Handler:    _ConsoleService_CommandPermissionsRemovePlayerGroup_Handler,
		},
		{
			MethodName: "CommandPermissionsRenameGroup",
			Handler:    _ConsoleService_CommandPermissionsRenameGroup_Handler,
		},
		{
			MethodName: "CommandResetTips",
			Handler:    _ConsoleService_CommandResetTips_Handler,
		},
		{
			MethodName: "CommandEvolution",
			Handler:    _ConsoleService_CommandEvolution_Handler,
		},
		{
			MethodName: "CommandEvolutionGet",
			Handler:    _ConsoleService_CommandEvolutionGet_Handler,
		},
		{
			MethodName: "CommandSeed",
			Handler:    _ConsoleService_CommandSeed_Handler,
		},
		{
			MethodName: "CommandTime",
			Handler:    _ConsoleService_CommandTime_Handler,
		},
		{
			MethodName: "CommandToggleActionLogging",
			Handler:    _ConsoleService_CommandToggleActionLogging_Handler,
		},
		{
			MethodName: "CommandToggleHeavyMode",
			Handler:    _ConsoleService_CommandToggleHeavyMode_Handler,
		},
		{
			MethodName: "CommandUnlockShortcutBar",
			Handler:    _ConsoleService_CommandUnlockShortcutBar_Handler,
		},
		{
			MethodName: "CommandUnlockTips",
			Handler:    _ConsoleService_CommandUnlockTips_Handler,
		},
		{
			MethodName: "CommandVersion",
			Handler:    _ConsoleService_CommandVersion_Handler,
		},
		{
			MethodName: "CommandAdmins",
			Handler:    _ConsoleService_CommandAdmins_Handler,
		},
		{
			MethodName: "CommandBan",
			Handler:    _ConsoleService_CommandBan_Handler,
		},
		{
			MethodName: "CommandBans",
			Handler:    _ConsoleService_CommandBans_Handler,
		},
		{
			MethodName: "CommandDemote",
			Handler:    _ConsoleService_CommandDemote_Handler,
		},
		{
			MethodName: "CommandIgnore",
			Handler:    _ConsoleService_CommandIgnore_Handler,
		},
		{
			MethodName: "CommandKick",
			Handler:    _ConsoleService_CommandKick_Handler,
		},
		{
			MethodName: "CommandMute",
			Handler:    _ConsoleService_CommandMute_Handler,
		},
		{
			MethodName: "CommandMutes",
			Handler:    _ConsoleService_CommandMutes_Handler,
		},
		{
			MethodName: "CommandPlayers",
			Handler:    _ConsoleService_CommandPlayers_Handler,
		},
		{
			MethodName: "CommandPromote",
			Handler:    _ConsoleService_CommandPromote_Handler,
		},
		{
			MethodName: "CommandPurge",
			Handler:    _ConsoleService_CommandPurge_Handler,
		},
		{
			MethodName: "CommandServerSave",
			Handler:    _ConsoleService_CommandServerSave_Handler,
		},
		{
			MethodName: "CommandUnban",
			Handler:    _ConsoleService_CommandUnban_Handler,
		},
		{
			MethodName: "CommandUnignore",
			Handler:    _ConsoleService_CommandUnignore_Handler,
		},
		{
			MethodName: "CommandUnmute",
			Handler:    _ConsoleService_CommandUnmute_Handler,
		},
		{
			MethodName: "CommandWhisper",
			Handler:    _ConsoleService_CommandWhisper_Handler,
		},
		{
			MethodName: "CommandWhitelistAdd",
			Handler:    _ConsoleService_CommandWhitelistAdd_Handler,
		},
		{
			MethodName: "CommandWhitelistGet",
			Handler:    _ConsoleService_CommandWhitelistGet_Handler,
		},
		{
			MethodName: "CommandWhitelistRemove",
			Handler:    _ConsoleService_CommandWhitelistRemove_Handler,
		},
		{
			MethodName: "CommandWhitelistClear",
			Handler:    _ConsoleService_CommandWhitelistClear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/factorioapi/v2/command.proto",
}
