components:
  schemas:
    jsonapiErrorObject:
      properties:
        code:
          description: an application-specific error code, expressed as a string value.
          example: USER_UPDATE_FAILED
          type: string
        detail:
          description: a human-readable explanation specific to this occurrence of the problem. Like title.
          example: A field under /user/age is not correct, should be 'number' instead of 'string'
          type: string
        id:
          description: a unique identifier for this particular occurrence of the problem.
          example: BAD_REQUEST
          type: string
        links:
          $ref: '#/components/schemas/jsonapiLinks'
        meta:
          additionalProperties:
            $ref: '#/components/schemas/protobufAny'
          description: a meta object containing non-standard meta-information about the error.
          type: object
        source:
          $ref: '#/components/schemas/jsonapiErrorObjectSource'
        status:
          description: the HTTP status code applicable to this problem, expressed as a string value.
          example: "400"
          format: int64
          type: integer
        title:
          example: Failed to update user's profile, invalid parameter(s) detected
          title: a short, human-readable summary of the problem
          type: string
      type: object
    jsonapiErrorObjectSource:
      properties:
        header:
          description: a string indicating the name of a single request header which caused the error.
          example: X-SOME-HEADER
          type: string
        parameter:
          description: a string indicating which URI query parameter caused the error.
          example: created_at.ASC
          type: string
        pointer:
          description: |-
            a JSON Pointer [RFC6901] to the value in the request document that caused the error
            [e.g. "/data" for a primary data object, or "/data/attributes/title" for a specific attribute].
          example: /user/age
          type: string
      type: object
    jsonapiLinks:
      description: Where specified, a links member can be used to represent links.
      properties:
        describedby:
          description: a link to a description document (e.g. OpenAPI or JSON Schema) for the link target.
          example: OpenAPI
          type: string
        href:
          description: a string whose value is a URI-reference [RFC3986 Section 4.1] pointing to the link’s target.
          example: https://apidocs.example.com/errors/BAD_REQUEST
          type: string
        hreflang:
          description: |-
            a string or an array of strings indicating the language(s) of the link’s target.
            An array of strings indicates that the link’s target is available in multiple languages.
          example: en-US
          type: string
        meta:
          additionalProperties:
            $ref: '#/components/schemas/protobufAny'
          description: a meta object containing non-standard meta-information about the link.
          type: object
        rel:
          description: a string indicating the link’s relation type.
          example: external
          type: string
        title:
          description: |-
            a string which serves as a label for the destination of a link
            such that it can be used as a human-readable identifier (e.g., a menu entry).
          example: Learn more about BAD_REQUEST
          type: string
        type:
          description: a string indicating the media type of the link’s target.
          example: text/html
          type: string
      type: object
    protobufAny:
      additionalProperties: {}
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }
            // or ...
            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
              foo = any.unpack(Foo.getDefaultInstance());
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".

        JSON
        ====
        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
      properties:
        '@type':
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com. As of May 2023, there are no widely used type server
            implementations and no plans to implement one.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
          type: string
      type: object
    v1CommandAdminsResponse:
      properties:
        admins:
          description: The list of admins.
          example: nekomeowww
          items:
            $ref: '#/components/schemas/v1Player'
          type: array
      type: object
    v1CommandBanRequest:
      properties:
        username:
          description: The username to ban.
          example: nekomeowww
          type: string
      type: object
    v1CommandBanResponse:
      type: object
    v1CommandBansResponse:
      properties:
        bans:
          description: The list of bans.
          example: nekomeowww
          items:
            $ref: '#/components/schemas/v1Player'
          type: array
      type: object
    v1CommandDemoteRequest:
      properties:
        username:
          description: The username to demote.
          example: nekomeowww
          type: string
      type: object
    v1CommandDemoteResponse:
      type: object
    v1CommandEvolutionResponse:
      properties:
        evolutionFactor:
          description: The current alien evolution factor.
          example: 0.1
          format: double
          type: number
        pollution:
          example: 10
          format: double
          title: in percentage
          type: number
        spawnerKills:
          example: 10
          format: double
          title: in percentage
          type: number
        time:
          example: 10
          format: double
          title: in percentage
          type: number
      type: object
    v1CommandIgnoreRequest:
      properties:
        username:
          description: The username to ignore.
          example: nekomeowww
          type: string
      type: object
    v1CommandIgnoreResponse:
      type: object
    v1CommandKickRequest:
      properties:
        reason:
          description: The reason for the kick.
          example: Reason
          type: string
        username:
          description: The username to kick.
          example: nekomeowww
          type: string
      type: object
    v1CommandKickResponse:
      type: object
    v1CommandMessageRequest:
      properties:
        message:
          description: The message to send.
          example: Hello
          type: string
      type: object
    v1CommandMessageResponse:
      type: object
    v1CommandMuteRequest:
      properties:
        username:
          description: The username to mute.
          example: nekomeowww
          type: string
      type: object
    v1CommandMuteResponse:
      type: object
    v1CommandMutesResponse:
      properties:
        mutes:
          description: The list of mutes.
          example: nekomeowww
          items:
            $ref: '#/components/schemas/v1Player'
          type: array
      type: object
    v1CommandPlayersResponse:
      properties:
        players:
          description: The list of players.
          example: nekomeowww
          items:
            $ref: '#/components/schemas/v1Player'
          type: array
      type: object
    v1CommandPromoteRequest:
      properties:
        username:
          description: The username to promote.
          example: nekomeowww
          type: string
      type: object
    v1CommandPromoteResponse:
      type: object
    v1CommandPurgeRequest:
      properties:
        username:
          description: The username to purge.
          example: nekomeowww
          type: string
      type: object
    v1CommandPurgeResponse:
      type: object
    v1CommandRawRequest:
      properties:
        input:
          description: The input for the command. For example, it will be formatted and executed with `/c game.player.zoom=0.1`.
          example: /c game.player.zoom=0.1
          type: string
      type: object
    v1CommandRawResponse:
      properties:
        output:
          description: The output from the command.
          example: Ok
          type: string
      type: object
    v1CommandSeedResponse:
      properties:
        seed:
          description: The map seed.
          example: "123456"
          type: string
      type: object
    v1CommandServerSaveRequest:
      type: object
    v1CommandServerSaveResponse:
      type: object
    v1CommandTimeResponse:
      properties:
        time:
          description: Get info about how old the map is.
          example: 10
          format: double
          type: number
      type: object
    v1CommandUnbanRequest:
      properties:
        username:
          description: The username to unban.
          example: nekomeowww
          type: string
      type: object
    v1CommandUnbanResponse:
      type: object
    v1CommandUnignoreRequest:
      properties:
        username:
          description: The username to unignore.
          example: nekomeowww
          type: string
      type: object
    v1CommandUnignoreResponse:
      type: object
    v1CommandUnmuteRequest:
      properties:
        username:
          description: The username to unmute.
          example: nekomeowww
          type: string
      type: object
    v1CommandUnmuteResponse:
      type: object
    v1CommandVersionResponse:
      properties:
        version:
          description: The version of the current Factorio game server.
          example: 1.1.0
          type: string
      type: object
    v1CommandWhisperRequest:
      properties:
        message:
          description: The message to whisper.
          example: Hello
          type: string
        username:
          description: The username to whisper.
          example: nekomeowww
          type: string
      type: object
    v1CommandWhisperResponse:
      type: object
    v1CommandWhitelistAddRequest:
      properties:
        username:
          description: The username to add to the whitelist.
          example: nekomeowww
          type: string
      type: object
    v1CommandWhitelistAddResponse:
      type: object
    v1CommandWhitelistClearRequest:
      type: object
    v1CommandWhitelistClearResponse:
      type: object
    v1CommandWhitelistGetResponse:
      properties:
        whitelist:
          description: The list of whitelist.
          example: nekomeowww
          items:
            $ref: '#/components/schemas/v1Player'
          type: array
      type: object
    v1CommandWhitelistRemoveRequest:
      properties:
        username:
          description: The username to remove from the whitelist.
          example: nekomeowww
          type: string
      type: object
    v1CommandWhitelistRemoveResponse:
      type: object
    v1Player:
      properties:
        online:
          description: Whether the admin is online.
          example: true
          type: boolean
        username:
          description: The username of the admin.
          example: nekomeowww
          type: string
      type: object
info:
  title: Factorio Admin API
  version: "1.0"
openapi: 3.0.3
paths:
  /api/v1/console/command/admins:
    get:
      description: Get the list of admins.
      operationId: ConsoleService_CommandAdmins
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandAdminsResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Get the list of admins.
      tags:
        - Console
  /api/v1/console/command/ban:
    post:
      description: Ban a player.
      operationId: ConsoleService_CommandBan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CommandBanRequest'
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandBanResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Ban a player.
      tags:
        - Console
  /api/v1/console/command/bans:
    get:
      description: Get the list of bans.
      operationId: ConsoleService_CommandBans
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandBansResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Get the list of bans.
      tags:
        - Console
  /api/v1/console/command/demote:
    post:
      description: Demote a player.
      operationId: ConsoleService_CommandDemote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CommandDemoteRequest'
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandDemoteResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Demote a player.
      tags:
        - Console
  /api/v1/console/command/evolution:
    get:
      description: Get info about the alien evolution factor.
      operationId: ConsoleService_CommandEvolution
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandEvolutionResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Get info about the alien evolution factor.
      tags:
        - Console
  /api/v1/console/command/ignore:
    post:
      description: Ignore a player.
      operationId: ConsoleService_CommandIgnore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CommandIgnoreRequest'
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandIgnoreResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Ignore a player.
      tags:
        - Console
  /api/v1/console/command/kick:
    post:
      description: Kick a player.
      operationId: ConsoleService_CommandKick
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CommandKickRequest'
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandKickResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Kick a player.
      tags:
        - Console
  /api/v1/console/command/message:
    post:
      description: Send a message to all players.
      operationId: ConsoleService_CommandMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CommandMessageRequest'
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandMessageResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Send a message to all players.
      tags:
        - Console
  /api/v1/console/command/mute:
    post:
      description: Mute a player.
      operationId: ConsoleService_CommandMute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CommandMuteRequest'
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandMuteResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Mute a player.
      tags:
        - Console
  /api/v1/console/command/mutes:
    get:
      description: Get the list of mutes.
      operationId: ConsoleService_CommandMutes
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandMutesResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Get the list of mutes.
      tags:
        - Console
  /api/v1/console/command/players:
    get:
      description: Get the list of players.
      operationId: ConsoleService_CommandPlayers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandPlayersResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Get the list of players.
      tags:
        - Console
  /api/v1/console/command/promote:
    post:
      description: Promote a player.
      operationId: ConsoleService_CommandPromote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CommandPromoteRequest'
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandPromoteResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Promote a player.
      tags:
        - Console
  /api/v1/console/command/purge:
    post:
      description: Purge a player.
      operationId: ConsoleService_CommandPurge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CommandPurgeRequest'
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandPurgeResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Purge a player.
      tags:
        - Console
  /api/v1/console/command/raw:
    post:
      description: Executes a Lua command (if allowed).
      operationId: ConsoleService_CommandRaw
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CommandRawRequest'
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandRawResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Executes a Lua command (if allowed).
      tags:
        - Console
  /api/v1/console/command/seed:
    get:
      description: Get the map seed.
      operationId: ConsoleService_CommandSeed
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandSeedResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Get the map seed.
      tags:
        - Console
  /api/v1/console/command/server-save:
    post:
      description: Save the game.
      operationId: ConsoleService_CommandServerSave
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CommandServerSaveRequest'
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandServerSaveResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Save the game.
      tags:
        - Console
  /api/v1/console/command/time:
    get:
      description: Get the current game time.
      operationId: ConsoleService_CommandTime
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandTimeResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Get the current game time.
      tags:
        - Console
  /api/v1/console/command/unban:
    post:
      description: Unban a player.
      operationId: ConsoleService_CommandUnban
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CommandUnbanRequest'
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandUnbanResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Unban a player.
      tags:
        - Console
  /api/v1/console/command/unignore:
    post:
      description: Unignore a player.
      operationId: ConsoleService_CommandUnignore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CommandUnignoreRequest'
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandUnignoreResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Unignore a player.
      tags:
        - Console
  /api/v1/console/command/unmute:
    post:
      description: Unmute a player.
      operationId: ConsoleService_CommandUnmute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CommandUnmuteRequest'
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandUnmuteResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Unmute a player.
      tags:
        - Console
  /api/v1/console/command/version:
    get:
      description: Get the version of the current Factorio game server.
      operationId: ConsoleService_CommandVersion
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandVersionResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Get the version of the current Factorio game server.
      tags:
        - Console
  /api/v1/console/command/whisper:
    post:
      description: Whisper a message.
      operationId: ConsoleService_CommandWhisper
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CommandWhisperRequest'
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandWhisperResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Whisper a message.
      tags:
        - Console
  /api/v1/console/command/whitelist:
    delete:
      description: Clear the whitelist.
      operationId: ConsoleService_CommandWhitelistClear
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CommandWhitelistClearRequest'
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandWhitelistClearResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Clear the whitelist.
      tags:
        - Console
    get:
      description: Get the list of whitelist.
      operationId: ConsoleService_CommandWhitelistGet
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandWhitelistGetResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Get the list of whitelist.
      tags:
        - Console
    patch:
      description: Remove a player from the whitelist.
      operationId: ConsoleService_CommandWhitelistRemove
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CommandWhitelistRemoveRequest'
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandWhitelistRemoveResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Remove a player from the whitelist.
      tags:
        - Console
  /api/v1/console/command/whitelist/add:
    post:
      description: Add a player to the whitelist.
      operationId: ConsoleService_CommandWhitelistAdd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CommandWhitelistAddRequest'
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CommandWhitelistAddResponse'
          description: A successful response.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Internal Server Error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonapiErrorObject'
          description: Service Unavailable
      summary: Add a player to the whitelist.
      tags:
        - Console
